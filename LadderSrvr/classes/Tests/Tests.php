<?
/*	=======================================
	Copyright 1998 .. 2015 - E Net Arch
		www.ENetArch.net - 248-686-1407
		ENetArch on AIM, Yahoo, and Skype

	This program is distributed under the terms of the GNU 
	General Public License (or the Lesser GPL).
	======================================= */

namespace Tests;

docFoo 
( Array
(
	"Class" => "Tests",
	"Description" => "Master test class called to execute tests",
	"Syntax" => "objTests = new \Tests\Tests (szLogFile, aryTests);",
	"Requirements" => Array
		(
			"Allow full regression testing of code",
			"Allow random sampled testing of code",
			"Store test results in a text file",
			"The log can be printed",
			"Tests can setup, run and teardown sample environments",
			"Tests can configure their environments before running.",
			"Tests can reset their environemtns after running",
			"A test can be looped N times",
		),
	"Parameters" => Array 
		(
			"szLogFile - the file to which to dump all the tests results to",
			"aryTests - an array of strings containing the class names of the tests",
		),
	
	"Returns" => "Tests - the primary object running all the tests listed in aryTests",
		
	"Usage" => Array 
		(
			"When testing parameters make sure that you test for:
				- the value ranges, 
				- the error codes that should be generated by out of bounds ranges, 
				- that the object adjusts accordingly when the instance is:
					- initialized and
					- changed.
			",

			"Assume you have 20 configurations that a test needs to run through.  Instead of
				writing a configuration for each test, you can write a configurtion routine to be
				executed during setup.  The setup function will check to see which loop that the
				test is executing and configure the environment appropriately.
			",
		),
	"Testing" => Array 
		( 
			"Confirm a valid file name and class path executes tests",
			"Confirm a invalid file name and valid class path throws an error",
			"Confirm a valid file name and invalid class path throws an error",
			"Confirm a invalid file name and invalid class path throws an error",
			"Confirm tests can log results to the text file",
			"Confirm that the text file can be printed",
			"Confirm full regression tests can be run",
			"Confirm random sample tests can be run",
			"Confirm that a test can loop N times",
		),
	"Comments" => Array
		(
			"As a dyslexic I cannot see typos in both variable names as well as logic.
			Testing is an effective way to identify these issues and remove them from code.
			
			As an example, a piece of code that trimmed spaces from a parameter then
			checked to make sure that the parameter was not zero (0) length, used the 
			original parameter vs the transformed variable to check for the boundary error.  
			
			The parameter was thsWord. The transformed variable was szWord.  The 
			boundary condition was [ strlen (thsWord) == 0 ].  I, as a dyslexic, could
			not see this problem.  Testing found that the boundary error was never called,
			because thsWord was never an empty string.  Or when it explicitally was, the
			error was expected.
			After writing additional print statements, the error described above was found
			and corrected.
			",
			
		),
		
		"Future" => Array 
		(
			"To speed testing, it might be helpful to know which parts of the code changed.
			Initially thoughts are around checking the date time stamps of file.  Futher, checks
			might be into a GIT or SVN repository.  And still a further check might be into the
			actual function and/or class, itself.  The last check would check to see if the function
			changed and test only those functions that did.  And if the function is part of a class,
			then it would check the class to make sure that it still passes testing. And so on up
			the tree of the application.
			",
		),
) ) ;

class Tests
{
	private $file = null;
	private $szFile = null;
	
	public function __construct ($szLogFile, $aryTests)
	{
		$this->szFile = $szLogFile;
		$this->file = fopen ($szLogFile, "w");
		fwrite ($this->file, "<P>Test Run Log - " . Now () . "</P>");
		
		forEach ($aryTests AS $key => $val)
		{
			$szClass = getClassName ($val);
			if (!class_exists ($szClass))
			{
				$this->log ("class " . $szClass . " - does not exist =( ");
				continue;
			}

			$test = new $szClass ($this);
			
			$this->log ("Running - " . $val);
			
			$bSuccess = $test->setup ();
			if (!$bSuccess)
				$this->log ("Setup Failed - " . $val);
			
			if ($bSuccess)
			$bSuccess &= $test->run ();
			
			if ($bSuccess)
			{
				$bSuccess &= $test->teardown ();
			
				if (!$bSuccess)
					$this->log ("Teardown Failed - " . $val);
			}
			
			if ($bSuccess)
				$this->log ("Complete - " . $val);
				
			$this->log ("========== ");
		}
		
		fclose ($this->file);
	}
	
	public function log ($szLog)
	{ fwrite ($this->file, Now() . " - " . $szLog . "<BR>"); }
	
	public function printLog ()
	{	readfile ($this->szFile);	}
}

?>
